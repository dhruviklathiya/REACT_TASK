{"ast":null,"code":"var _jsxFileName = \"/Users/dhruviklathiya/Desktop/D CODER/09 React js/Project_practice/practice__/src/Components/VDOM_crud.jsx\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from 'react'\n\n// const VDOM_crud = () => {\n//     const FNAME = useRef()\n//     const LNAME = useRef()\n//     const [data, setdata] = useState([])\n//     const [view, setview] = useState({})\n//     const [ind, setind] = useState()\n\n//     const submit_fn = () => {\n//         const input = {\n//             FNAME: FNAME.current.value,\n//             LNAME: LNAME.current.value,\n//         }\n//         setdata([...data, input])\n//     }\n\n//     const delete_fn = (ind) => {\n//         data.splice(ind, 1)\n//         setdata([...data])\n//     }\n\n//     const update_fn = (val, ind) => {\n//         setview(val)\n//         setind(ind)\n//     }\n\n//     const save_update = () => {\n//         console.log(ind);\n//         console.log(view);\n//         data.splice(ind, 1, view)\n//         setdata([...data])\n//     }\n\n//     return (\n//         <>\n//             <div>\n//                 <label>FNAME</label>\n//                 <input name='FNAME' ref={FNAME} />\n//                 <label>LNAME</label>\n//                 <input name='LNAME' ref={LNAME} />\n//             </div>\n//             <div>\n//                 <button onClick={submit_fn}>SUBMIT</button>\n//             </div>\n//             <div>\n//                 {\n//                     data?.map((val, ind) => {\n//                         return (\n//                             <>\n//                                 <table border={5}>\n//                                     <tr>\n//                                         <h1>{val.FNAME}</h1>\n//                                         <td><h1>{val.LNAME}</h1></td>\n//                                         <td><button onClick={() => delete_fn(ind)}>DELETE</button></td>\n//                                         <td>{/* <button onClick={() => update_fn(val, ind)}>UPDATE</button> */}</td>\n//                                         <td><button onClick={() => update_fn(val, ind)} type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">UPADTE</button></td>\n//                                     </tr>\n//                                 </table>\n//                             </>\n//                         )\n//                     })\n//                 }\n//             </div>\n\n//             {/* MODAL */}\n\n//             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div class=\"modal-dialog\" role=\"document\">\n//                     <div class=\"modal-content\">\n//                         <div class=\"modal-header\">\n//                             <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div class=\"modal-body\">\n//                             <div>\n//                                 <label>FNAME</label>\n//                                 <input name='FNAME' onChange={(e) => { setview({ ...view, FNAME: e.target.value }); console.log(view); }} value={view.FNAME} />\n//                             </div>\n//                             <div>\n//                                 <label>LNAME</label>\n//                                 <input name='LNAME' onChange={(e) => { setview({ ...view, LNAME: e.target.value }); console.log(view); }} value={view.LNAME} />\n//                             </div>\n//                         </div>\n//                         <div class=\"modal-footer\">\n//                             <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button type=\"button\" class=\"btn btn-primary\" onClick={save_update}>Save changes</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </>\n//     )\n// }\n\n// export default VDOM_crud\n\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VDOM_crud = () => {\n  _s();\n  const FNAME = useRef();\n  const LNAME = useRef();\n  const [data, setdata] = useState([]);\n  const [view, setview] = useState({});\n  const [ind, setind] = useState();\n  const submit_fn = () => {\n    const input = {\n      FNAME: FNAME.current.value,\n      LNAME: LNAME.current.value\n    };\n    setdata([...data, input]);\n  };\n  const delete_fn = ind => {\n    data.splice(ind, 1);\n    setdata([...data]);\n  };\n  const update_fn = (val, ind) => {\n    setview(val);\n    setind(ind);\n  };\n  const save_update = () => {\n    console.log(ind);\n    console.log(view);\n    data.splice(ind, 1, view);\n    setdata([...data]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"FNAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"FNAME\",\n        ref: FNAME\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"LNAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"LNAME\",\n        ref: LNAME\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submit_fn,\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data === null || data === void 0 ? void 0 : data.map((val, ind) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            border: 5,\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: val.FNAME\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: val.LNAME\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => delete_fn(ind),\n                  children: \"DELETE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 33\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(VDOM_crud, \"ff6EQQGkiCQsa60OTAtV4aP9CP0=\");\n_c = VDOM_crud;\nexport default VDOM_crud;\nvar _c;\n$RefreshReg$(_c, \"VDOM_crud\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","VDOM_crud","_s","FNAME","LNAME","data","setdata","view","setview","ind","setind","submit_fn","input","current","value","delete_fn","splice","update_fn","val","save_update","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","name","ref","onClick","map","border","_c","$RefreshReg$"],"sources":["/Users/dhruviklathiya/Desktop/D CODER/09 React js/Project_practice/practice__/src/Components/VDOM_crud.jsx"],"sourcesContent":["// import React, { useRef, useState } from 'react'\n\n// const VDOM_crud = () => {\n//     const FNAME = useRef()\n//     const LNAME = useRef()\n//     const [data, setdata] = useState([])\n//     const [view, setview] = useState({})\n//     const [ind, setind] = useState()\n\n//     const submit_fn = () => {\n//         const input = {\n//             FNAME: FNAME.current.value,\n//             LNAME: LNAME.current.value,\n//         }\n//         setdata([...data, input])\n//     }\n\n//     const delete_fn = (ind) => {\n//         data.splice(ind, 1)\n//         setdata([...data])\n//     }\n\n//     const update_fn = (val, ind) => {\n//         setview(val)\n//         setind(ind)\n//     }\n\n//     const save_update = () => {\n//         console.log(ind);\n//         console.log(view);\n//         data.splice(ind, 1, view)\n//         setdata([...data])\n//     }\n\n//     return (\n//         <>\n//             <div>\n//                 <label>FNAME</label>\n//                 <input name='FNAME' ref={FNAME} />\n//                 <label>LNAME</label>\n//                 <input name='LNAME' ref={LNAME} />\n//             </div>\n//             <div>\n//                 <button onClick={submit_fn}>SUBMIT</button>\n//             </div>\n//             <div>\n//                 {\n//                     data?.map((val, ind) => {\n//                         return (\n//                             <>\n//                                 <table border={5}>\n//                                     <tr>\n//                                         <h1>{val.FNAME}</h1>\n//                                         <td><h1>{val.LNAME}</h1></td>\n//                                         <td><button onClick={() => delete_fn(ind)}>DELETE</button></td>\n//                                         <td>{/* <button onClick={() => update_fn(val, ind)}>UPDATE</button> */}</td>\n//                                         <td><button onClick={() => update_fn(val, ind)} type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">UPADTE</button></td>\n//                                     </tr>\n//                                 </table>\n//                             </>\n//                         )\n//                     })\n//                 }\n//             </div>\n\n//             {/* MODAL */}\n\n\n//             <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div class=\"modal-dialog\" role=\"document\">\n//                     <div class=\"modal-content\">\n//                         <div class=\"modal-header\">\n//                             <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div class=\"modal-body\">\n//                             <div>\n//                                 <label>FNAME</label>\n//                                 <input name='FNAME' onChange={(e) => { setview({ ...view, FNAME: e.target.value }); console.log(view); }} value={view.FNAME} />\n//                             </div>\n//                             <div>\n//                                 <label>LNAME</label>\n//                                 <input name='LNAME' onChange={(e) => { setview({ ...view, LNAME: e.target.value }); console.log(view); }} value={view.LNAME} />\n//                             </div>\n//                         </div>\n//                         <div class=\"modal-footer\">\n//                             <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button type=\"button\" class=\"btn btn-primary\" onClick={save_update}>Save changes</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </>\n//     )\n// }\n\n// export default VDOM_crud\n\nimport React, { useRef, useState } from 'react'\n\nconst VDOM_crud = () => {\n    const FNAME = useRef()\n    const LNAME = useRef()\n    const [data, setdata] = useState([])\n    const [view, setview] = useState({})\n    const [ind, setind] = useState()\n\n    const submit_fn = () => {\n        const input = {\n            FNAME: FNAME.current.value,\n            LNAME: LNAME.current.value,\n        }\n        setdata([...data, input])\n    }\n\n    const delete_fn = (ind) => {\n        data.splice(ind, 1)\n        setdata([...data])\n    }\n\n    const update_fn = (val, ind) => {\n        setview(val)\n        setind(ind)\n    }\n\n    const save_update = () => {\n        console.log(ind);\n        console.log(view);\n        data.splice(ind, 1, view)\n        setdata([...data])\n    }\n\n    return (\n        <>\n            <div>\n                <label>FNAME</label>\n                <input name='FNAME' ref={FNAME} />\n                <label>LNAME</label>\n                <input name='LNAME' ref={LNAME} />\n            </div>\n            <div>\n                <button onClick={submit_fn}>SUBMIT</button>\n            </div>\n            <div>\n                {\n                    data?.map((val, ind) => {\n                        return (\n                            <>\n                                <table border={5}>\n                                    <tr>\n                                        <h1>{val.FNAME}</h1>\n                                        <td><h1>{val.LNAME}</h1></td>\n                                        <td><button onClick={() => delete_fn(ind)}>DELETE</button></td>\n                                        {/* onClick={() => update_fn(val, ind) */}\n                                    </tr>\n                                </table>\n                            </>\n                        )\n                    })\n                }\n            </div>\n\n            {/* onClick={save_update} */}\n        </>\n    )\n}\n\nexport default VDOM_crud\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}